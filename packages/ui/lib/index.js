/*! For license information please see index.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.FyStudio=t():e.FyStudio=t()}(this,(function(){return(()=>{var e={505:(e,t,r)=>{"use strict";r.r(t),r.d(t,{__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:()=>$,default:()=>R,lazy:()=>P,loadableReady:()=>C});var n=r(294);function o(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},i.apply(this,arguments)}function a(e,t){return a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},a(e,t)}var u=r(864),c=r(679),s=r.n(c);function l(e,t){if(!e){var r=new Error("loadable: "+t);throw r.framesToPop=1,r.name="Invariant Violation",r}}function f(e){console.warn("loadable: "+e)}var p=n.createContext();function d(e){return e+"__LOADABLE_REQUIRED_CHUNKS__"}var y=Object.freeze({__proto__:null,getRequiredChunkKey:d,invariant:l,Context:p}),h={initialChunks:{}},m="PENDING",v="REJECTED",b=function(e){return e};function _(e){var t=e.defaultResolveComponent,r=void 0===t?b:t,c=e.render,f=e.onLoad;function d(e,t){void 0===t&&(t={});var d=function(e){return"function"==typeof e?{requireAsync:e,resolve:function(){},chunkName:function(){}}:e}(e),y={};function b(e){return t.cacheKey?t.cacheKey(e):d.resolve?d.resolve(e):"static"}function _(e,n,o){var i=t.resolveComponent?t.resolveComponent(e,n):r(e);if(t.resolveComponent&&!(0,u.isValidElementType)(i))throw new Error("resolveComponent returned something that is not a React component!");return s()(o,i,{preload:!0}),i}var g,O,S=function(e){var t=b(e),r=y[t];return r&&r.status!==v||((r=d.requireAsync(e)).status=m,y[t]=r,r.then((function(){r.status="RESOLVED"}),(function(t){console.error("loadable-components: failed to asynchronously load component",{fileName:d.resolve(e),chunkName:d.chunkName(e),error:t?t.message:t}),r.status=v}))),r},w=function(e){var r,n;function u(r){var n;return(n=e.call(this,r)||this).state={result:null,error:null,loading:!0,cacheKey:b(r)},l(!r.__chunkExtractor||d.requireSync,"SSR requires `@loadable/babel-plugin`, please install it"),r.__chunkExtractor?(!1===t.ssr||(d.requireAsync(r).catch((function(){return null})),n.loadSync(),r.__chunkExtractor.addChunk(d.chunkName(r))),function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(n)):(!1!==t.ssr&&(d.isReady&&d.isReady(r)||d.chunkName&&h.initialChunks[d.chunkName(r)])&&n.loadSync(),n)}n=e,(r=u).prototype=Object.create(n.prototype),r.prototype.constructor=r,a(r,n),u.getDerivedStateFromProps=function(e,t){var r=b(e);return i({},t,{cacheKey:r,loading:t.loading||t.cacheKey!==r})};var s=u.prototype;return s.componentDidMount=function(){this.mounted=!0;var e=this.getCache();e&&e.status===v&&this.setCache(),this.state.loading&&this.loadAsync()},s.componentDidUpdate=function(e,t){t.cacheKey!==this.state.cacheKey&&this.loadAsync()},s.componentWillUnmount=function(){this.mounted=!1},s.safeSetState=function(e,t){this.mounted&&this.setState(e,t)},s.getCacheKey=function(){return b(this.props)},s.getCache=function(){return y[this.getCacheKey()]},s.setCache=function(e){void 0===e&&(e=void 0),y[this.getCacheKey()]=e},s.triggerOnLoad=function(){var e=this;f&&setTimeout((function(){f(e.state.result,e.props)}))},s.loadSync=function(){if(this.state.loading)try{var e=_(d.requireSync(this.props),this.props,E);this.state.result=e,this.state.loading=!1}catch(e){console.error("loadable-components: failed to synchronously load component, which expected to be available",{fileName:d.resolve(this.props),chunkName:d.chunkName(this.props),error:e?e.message:e}),this.state.error=e}},s.loadAsync=function(){var e=this,t=this.resolveAsync();return t.then((function(t){var r=_(t,e.props,E);e.safeSetState({result:r,loading:!1},(function(){return e.triggerOnLoad()}))})).catch((function(t){return e.safeSetState({error:t,loading:!1})})),t},s.resolveAsync=function(){var e=this.props,t=(e.__chunkExtractor,e.forwardedRef,o(e,["__chunkExtractor","forwardedRef"]));return S(t)},s.render=function(){var e=this.props,r=e.forwardedRef,n=e.fallback,a=(e.__chunkExtractor,o(e,["forwardedRef","fallback","__chunkExtractor"])),u=this.state,s=u.error,l=u.loading,f=u.result;if(t.suspense&&(this.getCache()||this.loadAsync()).status===m)throw this.loadAsync();if(s)throw s;var p=n||t.fallback||null;return l?p:c({fallback:p,result:f,options:t,props:i({},a,{ref:r})})},u}(n.Component),x=(O=function(e){return n.createElement(p.Consumer,null,(function(t){return n.createElement(g,Object.assign({__chunkExtractor:t},e))}))},(g=w).displayName&&(O.displayName=g.displayName+"WithChunkExtractor"),O),E=n.forwardRef((function(e,t){return n.createElement(x,Object.assign({forwardedRef:t},e))}));return E.displayName="Loadable",E.preload=function(e){E.load(e)},E.load=function(e){return S(e)},E}return{loadable:d,lazy:function(e,t){return d(e,i({},t,{suspense:!0}))}}}var g=_({defaultResolveComponent:function(e){return e.__esModule?e.default:e.default||e},render:function(e){var t=e.result,r=e.props;return n.createElement(t,r)}}),O=g.loadable,S=g.lazy,w=_({onLoad:function(e,t){e&&t.forwardedRef&&("function"==typeof t.forwardedRef?t.forwardedRef(e):t.forwardedRef.current=e)},render:function(e){var t=e.result,r=e.props;return r.children?r.children(t):null}}),x=w.loadable,E=w.lazy,j="undefined"!=typeof window;function C(e,t){void 0===e&&(e=function(){});var r=void 0===t?{}:t,n=r.namespace,o=void 0===n?"":n,i=r.chunkLoadingGlobal,a=void 0===i?"__LOADABLE_LOADED_CHUNKS__":i;if(!j)return f("`loadableReady()` must be called in browser only"),e(),Promise.resolve();var u=null;if(j){var c=d(o),s=document.getElementById(c);if(s){u=JSON.parse(s.textContent);var l=document.getElementById(c+"_ext");if(!l)throw new Error("loadable-component: @loadable/server does not match @loadable/component");JSON.parse(l.textContent).namedChunks.forEach((function(e){h.initialChunks[e]=!0}))}}if(!u)return f("`loadableReady()` requires state, please use `getScriptTags` or `getScriptElements` server-side"),e(),Promise.resolve();var p=!1;return new Promise((function(e){window[a]=window[a]||[];var t=window[a],r=t.push.bind(t);function n(){u.every((function(e){return t.some((function(t){return t[0].indexOf(e)>-1}))}))&&(p||(p=!0,e()))}t.push=function(){r.apply(void 0,arguments),n()},n()})).then(e)}var k=O;k.lib=x;var P=S;P.lib=E;var $=y;const R=k},679:(e,t,r)=>{"use strict";var n=r(864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function c(e){return n.isMemo(e)?a:u[e.$$typeof]||o}u[n.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[n.Memo]=a;var s=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,y=Object.prototype;e.exports=function e(t,r,n){if("string"!=typeof r){if(y){var o=d(r);o&&o!==y&&e(t,o,n)}var a=l(r);f&&(a=a.concat(f(r)));for(var u=c(t),h=c(r),m=0;m<a.length;++m){var v=a[m];if(!(i[v]||n&&n[v]||h&&h[v]||u&&u[v])){var b=p(r,v);try{s(t,v,b)}catch(e){}}}}return t}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,u,c=o(e),s=1;s<arguments.length;s++){for(var l in a=Object(arguments[s]))r.call(a,l)&&(c[l]=a[l]);if(t){u=t(a);for(var f=0;f<u.length;f++)n.call(a,u[f])&&(c[u[f]]=a[u[f]])}}return c}},921:(e,t)=>{"use strict";var r="function"==typeof Symbol&&Symbol.for,n=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,a=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,l=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,d=r?Symbol.for("react.suspense"):60113,y=r?Symbol.for("react.suspense_list"):60120,h=r?Symbol.for("react.memo"):60115,m=r?Symbol.for("react.lazy"):60116,v=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,_=r?Symbol.for("react.responder"):60118,g=r?Symbol.for("react.scope"):60119;function O(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case l:case f:case i:case u:case a:case d:return e;default:switch(e=e&&e.$$typeof){case s:case p:case m:case h:case c:return e;default:return t}}case o:return t}}}function S(e){return O(e)===f}t.AsyncMode=l,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=c,t.Element=n,t.ForwardRef=p,t.Fragment=i,t.Lazy=m,t.Memo=h,t.Portal=o,t.Profiler=u,t.StrictMode=a,t.Suspense=d,t.isAsyncMode=function(e){return S(e)||O(e)===l},t.isConcurrentMode=S,t.isContextConsumer=function(e){return O(e)===s},t.isContextProvider=function(e){return O(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===n},t.isForwardRef=function(e){return O(e)===p},t.isFragment=function(e){return O(e)===i},t.isLazy=function(e){return O(e)===m},t.isMemo=function(e){return O(e)===h},t.isPortal=function(e){return O(e)===o},t.isProfiler=function(e){return O(e)===u},t.isStrictMode=function(e){return O(e)===a},t.isSuspense=function(e){return O(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===a||e===d||e===y||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===b||e.$$typeof===_||e.$$typeof===g||e.$$typeof===v)},t.typeOf=O},864:(e,t,r)=>{"use strict";e.exports=r(921)},408:(e,t,r)=>{"use strict";var n=r(418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,u=60110,c=60112;t.Suspense=60113;var s=60115,l=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),u=f("react.context"),c=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),l=f("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function d(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function m(e,t,r){this.props=e,this.context=t,this.refs=h,this.updater=r||y}function v(){}function b(e,t,r){this.props=e,this.context=t,this.refs=h,this.updater=r||y}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(d(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=m.prototype;var _=b.prototype=new v;_.constructor=b,n(_,m.prototype),_.isPureReactComponent=!0;var g={current:null},O=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function w(e,t,r){var n,i={},a=null,u=null;if(null!=t)for(n in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)O.call(t,n)&&!S.hasOwnProperty(n)&&(i[n]=t[n]);var c=arguments.length-2;if(1===c)i.children=r;else if(1<c){for(var s=Array(c),l=0;l<c;l++)s[l]=arguments[l+2];i.children=s}if(e&&e.defaultProps)for(n in c=e.defaultProps)void 0===i[n]&&(i[n]=c[n]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:g.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var E=/\/+/g;function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,r,n,a){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var c=!1;if(null===e)c=!0;else switch(u){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case o:case i:c=!0}}if(c)return a=a(c=e),e=""===n?"."+j(c,0):n,Array.isArray(a)?(r="",null!=e&&(r=e.replace(E,"$&/")+"/"),C(a,t,r,"",(function(e){return e}))):null!=a&&(x(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,r+(!a.key||c&&c.key===a.key?"":(""+a.key).replace(E,"$&/")+"/")+e)),t.push(a)),1;if(c=0,n=""===n?".":n+":",Array.isArray(e))for(var s=0;s<e.length;s++){var l=n+j(u=e[s],s);c+=C(u,t,r,l,a)}else if(l=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof l)for(e=l.call(e),s=0;!(u=e.next()).done;)c+=C(u=u.value,t,r,l=n+j(u,s++),a);else if("object"===u)throw t=""+e,Error(d(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return c}function k(e,t,r){if(null==e)return e;var n=[],o=0;return C(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var $={current:null};function R(){var e=$.current;if(null===e)throw Error(d(321));return e}var M={ReactCurrentDispatcher:$,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:g,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:k,forEach:function(e,t,r){k(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return k(e,(function(){t++})),t},toArray:function(e){return k(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error(d(143));return e}},t.Component=m,t.PureComponent=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,r){if(null==e)throw Error(d(267,e));var i=n({},e.props),a=e.key,u=e.ref,c=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,c=g.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(l in t)O.call(t,l)&&!S.hasOwnProperty(l)&&(i[l]=void 0===t[l]&&void 0!==s?s[l]:t[l])}var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){s=Array(l);for(var f=0;f<l;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:c}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=w,t.createFactory=function(e){var t=w.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:l,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return R().useCallback(e,t)},t.useContext=function(e,t){return R().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return R().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return R().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return R().useLayoutEffect(e,t)},t.useMemo=function(e,t){return R().useMemo(e,t)},t.useReducer=function(e,t,r){return R().useReducer(e,t,r)},t.useRef=function(e){return R().useRef(e)},t.useState=function(e){return R().useState(e)},t.version="17.0.2"},294:(e,t,r)=>{"use strict";e.exports=r(408)},830:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=o(r(294));t.default=function(e){var t=e.attributes,r=e.extra;if(e.isTpl)return i.default.createElement("div",null,"Button Tpl");var o=t.text,a=(t.textAlign,r.commonStyle),u=a.width,c=void 0===u?375:u,s=a.height,l=void 0===s?40:s;return i.default.createElement("button",{style:n(n({},r),{width:c,height:l})},o)}},997:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={properties:{text:{title:"文本内容",type:"string",default:"文本"}},events:[],meta:{id:"Button",title:"按钮",description:"按钮组件，兼容小程序和H5平台",icon:"../icons/button.svg",category:"base",componentOrder:1}}},664:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=o(r(294));t.default=function(e){var t=e.attributes,r=e.extra;if(e.isTpl)return i.default.createElement("div",null,"Text Tpl");var o=t.text,a=t.textAlign,u=r.commonStyle,c=u.width,s=void 0===c?375:c,l=u.height,f=void 0===l?40:l;return i.default.createElement("span",{style:n(n({},r),{width:s,height:f,textAlign:a,display:"block"})},o)}},616:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={properties:{text:{title:"文本内容",type:"string",default:"文本"},textAlign:{title:"对齐方式",type:"string",default:"left",xComponent:"radio",enum:[{key:"left",text:"左对齐"},{key:"center",text:"居中对齐"},{key:"right",text:"右对齐"}]}},events:[],meta:{id:"Text",title:"文本",description:"按钮组件，兼容小程序和H5平台",icon:"../icons/button.svg",category:"base",componentOrder:1}}},740:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(616)),i=n(r(997)),a={Text:o.default,Button:i.default};t.default=a},607:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(740)),i=n(r(860));t.default={Schema:o.default,DynamicEngine:i.default}},860:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=a(r(294)),c=a(r(505));t.default=function(e){var t=e.item,n=(e.category,e.isTpl),o=t.attributes,a=t.extra,s=t.event,l=(0,c.default)((function(){return Promise.resolve().then((function(){return i(r(416)("./".concat(t.component)))}))}));return u.default.createElement(u.default.Fragment,null,u.default.createElement(l,{attributes:o,extra:a,isTpl:n,event:s,fallback:u.default.createElement("div",null,"Loading...")}))}},416:(e,t,r)=>{var n={"./":740,"./Button":830,"./Button/":830,"./Button/index":830,"./Button/index.tsx":830,"./Button/schema":997,"./Button/schema.ts":997,"./Text":664,"./Text/":664,"./Text/index":664,"./Text/index.tsx":664,"./Text/schema":616,"./Text/schema.ts":616,"./index":740,"./index.ts":740,"./schema.json":781};function o(e){var t=i(e);return r(t)}function i(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}o.keys=function(){return Object.keys(n)},o.resolve=i,e.exports=o,o.id=416},781:e=>{"use strict";e.exports=JSON.parse('{"description":"低码组件开发配置","type":"object","properties":{"name":{"description":"选填, 组件唯一标识","maxLength":214,"minLength":1,"type":"string"},"events":{"description":"选填, 组件可以被捕获的事件信息","default":[],"type":"array","items":{"$ref":"#/definitions/LCDS.IEvent"}},"data":{"description":"选填, 组件可以接收的数据, 用作组件props入参\\n需要符合 JSON SCHEMA 规范","default":{},"$schema":"https://comp-public-1303824488.cos.ap-shanghai.myqcloud.com/schema/schema#","$ref":"https://comp-public-1303824488.cos.ap-shanghai.myqcloud.com/schema/schema#"},"platforms":{"description":"选填, 组件适配的平台\\n\\n如果该字段为空, 则进行智能推断","type":"array","items":{"type":"string"}},"meta":{"description":"可选, 仅用于在低码平台的信息展示","type":"object","properties":{"title":{"description":"选填, 组件别名, 建议用中文","type":"string"},"description":{"description":"选填, 组件简介, 建议用中文","type":"string"},"icon":{"description":"选填, 组件图标, 暂时只支持本地图片","type":"string"},"category":{"description":"选填, 组件分类, 建议用中文","type":"string"},"componentOrder":{"description":"选填, 组件的排序权重","minimum":1,"maximum":10000,"type":"number"}}},"extra":{"description":"可选, 扩展字段, 尽量避免用"},"isContainer":{"description":"可选, 是否容器组件\\n\\n容器可以包含子节点，但是不能配置插槽","type":"boolean"}},"definitions":{"LCDS.IEvent":{"description":"低码组件可以被捕获的事件信息","type":"object","properties":{"name":{"description":"必填, 用作抛出和捕获事件的唯一标识","type":"string"},"title":{"description":"选填, 事件别名, 用于低码平台展示","type":"string"}},"required":["name","title"]}},"$schema":"http://json-schema.org/draft-07/schema#"}')}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}return r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(607)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,